/*
 @license Coveo Admin https://platform.cloud.coveo.com/license
*/
/* =========================================================
 * bootstrap-modal.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#modals
 * =========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

!(function ($) {
    'use strict'; // jshint ;_;

    /* MODAL CLASS DEFINITION
     * ====================== */

    var Modal = function (element, options) {
        this.options = options;
        this.$element = $(element).delegate('[data-dismiss="modal"]', 'click.dismiss.modal', $.proxy(this.hide, this));
        this.options.remote && this.$element.find('.modal-body').load(this.options.remote);
    };

    Modal.prototype = {
        constructor: Modal,

        toggle: function () {
            return this[!this.isShown ? 'show' : 'hide']();
        },

        show: function () {
            var that = this,
                e = $.Event('show');

            this.$element.trigger(e);

            if (this.isShown || e.isDefaultPrevented()) return;

            this.isShown = true;

            this.escape();

            this.backdrop(function () {
                var transition = $.support.transition && that.$element.hasClass('fade');

                if (!that.$element.parent().length) {
                    that.$element.appendTo(document.body); //don't move modals dom position
                }

                that.$element.show();

                if (transition) {
                    that.$element[0].offsetWidth; // force reflow
                }

                that.$element.addClass('in').attr('aria-hidden', false);

                that.enforceFocus();

                transition
                    ? that.$element.one($.support.transition.end, function () {
                          that.$element.focus().trigger('shown');
                      })
                    : that.$element.focus().trigger('shown');
            });
        },

        hide: function (e) {
            e && e.preventDefault();

            var that = this;

            e = $.Event('hide');

            this.$element.trigger(e);

            if (!this.isShown || e.isDefaultPrevented()) return;

            this.isShown = false;

            this.escape();

            $(document).off('focusin.modal');

            this.$element.removeClass('in').attr('aria-hidden', true);

            $.support.transition && this.$element.hasClass('fade') ? this.hideWithTransition() : this.hideModal();
        },

        enforceFocus: function () {
            var that = this;
            $(document).on('focusin.modal', function (e) {
                if (that.$element[0] !== e.target && !that.$element.has(e.target).length) {
                    that.$element.focus();
                }
            });
        },

        escape: function () {
            var that = this;
            if (this.isShown && this.options.keyboard) {
                this.$element.on('keyup.dismiss.modal', function (e) {
                    e.which == 27 && that.hide();
                });
            } else if (!this.isShown) {
                this.$element.off('keyup.dismiss.modal');
            }
        },

        hideWithTransition: function () {
            var that = this,
                timeout = setTimeout(function () {
                    that.$element.off($.support.transition.end);
                    that.hideModal();
                }, 500);

            this.$element.one($.support.transition.end, function () {
                clearTimeout(timeout);
                that.hideModal();
            });
        },

        hideModal: function () {
            var that = this;
            this.$element.hide();
            this.backdrop(function () {
                that.removeBackdrop();
                that.$element.trigger('hidden');
            });
        },

        removeBackdrop: function () {
            this.$backdrop && this.$backdrop.remove();
            this.$backdrop = null;
        },

        backdrop: function (callback) {
            var that = this,
                animate = this.$element.hasClass('fade') ? 'fade' : '';

            if (this.isShown && this.options.backdrop) {
                var doAnimate = $.support.transition && animate;

                this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').appendTo(document.body);

                this.$backdrop.click(
                    this.options.backdrop == 'static'
                        ? $.proxy(this.$element[0].focus, this.$element[0])
                        : $.proxy(this.hide, this)
                );

                if (doAnimate) this.$backdrop[0].offsetWidth; // force reflow

                this.$backdrop.addClass('in');

                if (!callback) return;

                doAnimate ? this.$backdrop.one($.support.transition.end, callback) : callback();
            } else if (!this.isShown && this.$backdrop) {
                this.$backdrop.removeClass('in');

                $.support.transition && this.$element.hasClass('fade')
                    ? this.$backdrop.one($.support.transition.end, callback)
                    : callback();
            } else if (callback) {
                callback();
            }
        },
    };

    /* MODAL PLUGIN DEFINITION
     * ======================= */

    var old = $.fn.modal;

    $.fn.modal = function (option) {
        return this.each(function () {
            var $this = $(this),
                data = $this.data('modal'),
                options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' && option);
            if (!data) $this.data('modal', (data = new Modal(this, options)));
            if (typeof option == 'string') data[option]();
            else if (options.show) data.show();
        });
    };

    $.fn.modal.defaults = {
        backdrop: true,
        keyboard: true,
        show: true,
    };

    $.fn.modal.Constructor = Modal;

    /* MODAL NO CONFLICT
     * ================= */

    $.fn.modal.noConflict = function () {
        $.fn.modal = old;
        return this;
    };

    /* MODAL DATA-API
     * ============== */

    $(document).on('click.modal.data-api', '[data-toggle="modal"]', function (e) {
        var $this = $(this),
            href = $this.attr('href'),
            $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))), //strip for ie7
            option = $target.data('modal')
                ? 'toggle'
                : $.extend({remote: !/#/.test(href) && href}, $target.data(), $this.data());

        e.preventDefault();

        $target.modal(option).one('hide', function () {
            $this.focus();
        });
    });
})(window.jQuery);

/* ============================================================
 * bootstrap-dropdown.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#dropdowns
 * ============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */

!(function ($) {
    'use strict'; // jshint ;_;

    /* DROPDOWN CLASS DEFINITION
     * ========================= */

    var toggle = '[data-toggle=dropdown]',
        Dropdown = function (element) {
            var $el = $(element).on('click.dropdown.data-api', this.toggle);
            $('html').on('click.dropdown.data-api', function () {
                $el.parent().removeClass('open');
            });
        };

    Dropdown.prototype = {
        constructor: Dropdown,

        toggle: function (e) {
            var $this = $(this),
                $parent,
                isActive;

            if ($this.is('.disabled, :disabled')) return;

            $parent = getParent($this);

            isActive = $parent.hasClass('open');

            clearMenus();

            if (!isActive) {
                if ('ontouchstart' in document.documentElement) {
                    // if mobile we we use a backdrop because click events don't delegate
                    $('<div class="dropdown-backdrop"/>').insertBefore($(this)).on('click', clearMenus);
                }
                $parent.toggleClass('open');
            }

            $this.focus();

            return false;
        },

        keydown: function (e) {
            var $this, $items, $active, $parent, isActive, index;

            if (!/(38|40|27)/.test(e.keyCode)) return;

            $this = $(this);

            e.preventDefault();
            e.stopPropagation();

            if ($this.is('.disabled, :disabled')) return;

            $parent = getParent($this);

            isActive = $parent.hasClass('open');

            if (!isActive || (isActive && e.keyCode == 27)) {
                if (e.which == 27) $parent.find(toggle).focus();
                return $this.click();
            }

            $items = $('[role=menu] li:not(.divider):visible a', $parent);

            if (!$items.length) return;

            index = $items.index($items.filter(':focus'));

            if (e.keyCode == 38 && index > 0) index--; // up
            if (e.keyCode == 40 && index < $items.length - 1) index++; // down
            if (!~index) index = 0;

            $items.eq(index).focus();
        },
    };

    function clearMenus() {
        $('.dropdown-backdrop').remove();
        $(toggle).each(function () {
            getParent($(this)).removeClass('open');
        });
    }

    function getParent($this) {
        var selector = $this.attr('data-target'),
            $parent;

        if (!selector) {
            selector = $this.attr('href');
            selector = selector && /#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, ''); //strip for ie7
        }

        $parent = selector && $(selector);

        if (!$parent || !$parent.length) $parent = $this.parent();

        return $parent;
    }

    /* DROPDOWN PLUGIN DEFINITION
     * ========================== */

    var old = $.fn.dropdown;

    $.fn.dropdown = function (option) {
        return this.each(function () {
            var $this = $(this),
                data = $this.data('dropdown');
            if (!data) $this.data('dropdown', (data = new Dropdown(this)));
            if (typeof option == 'string') data[option].call($this);
        });
    };

    $.fn.dropdown.Constructor = Dropdown;

    /* DROPDOWN NO CONFLICT
     * ==================== */

    $.fn.dropdown.noConflict = function () {
        $.fn.dropdown = old;
        return this;
    };

    /* APPLY TO STANDARD DROPDOWN ELEMENTS
     * =================================== */

    $(document)
        .on('click.dropdown.data-api', clearMenus)
        .on('click.dropdown.data-api', '.dropdown form', function (e) {
            e.stopPropagation();
        })
        .on('click.dropdown.data-api', toggle, Dropdown.prototype.toggle)
        .on('keydown.dropdown.data-api', toggle + ', [role=menu]', Dropdown.prototype.keydown);
})(window.jQuery);

/* =============================================================
 * bootstrap-scrollspy.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#scrollspy
 * =============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================== */

!(function ($) {
    'use strict'; // jshint ;_;

    /* SCROLLSPY CLASS DEFINITION
     * ========================== */

    function ScrollSpy(element, options) {
        var process = $.proxy(this.process, this),
            $element = $(element).is('body') ? $(window) : $(element),
            href;
        this.options = $.extend({}, $.fn.scrollspy.defaults, options);
        this.$scrollElement = $element.on('scroll.scroll-spy.data-api', process);
        this.selector =
            (this.options.target ||
            ((href = $(element).attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) || //strip for ie7
                '') + ' .nav li > a';
        this.$body = $('body');
        this.refresh();
        this.process();
    }

    ScrollSpy.prototype = {
        constructor: ScrollSpy,

        refresh: function () {
            var self = this,
                $targets;

            this.offsets = $([]);
            this.targets = $([]);

            $targets = this.$body
                .find(this.selector)
                .map(function () {
                    var $el = $(this),
                        href = $el.data('target') || $el.attr('href'),
                        $href = /^#\w/.test(href) && $(href);
                    return (
                        ($href &&
                            $href.length && [
                                [
                                    $href.position().top +
                                        (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()),
                                    href,
                                ],
                            ]) ||
                        null
                    );
                })
                .sort(function (a, b) {
                    return a[0] - b[0];
                })
                .each(function () {
                    self.offsets.push(this[0]);
                    self.targets.push(this[1]);
                });
        },

        process: function () {
            var scrollTop = this.$scrollElement.scrollTop() + this.options.offset,
                scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight,
                maxScroll = scrollHeight - this.$scrollElement.height(),
                offsets = this.offsets,
                targets = this.targets,
                activeTarget = this.activeTarget,
                i;

            if (scrollTop >= maxScroll) {
                return activeTarget != (i = targets.last()[0]) && this.activate(i);
            }

            for (i = offsets.length; i--; ) {
                activeTarget != targets[i] &&
                    scrollTop >= offsets[i] &&
                    (!offsets[i + 1] || scrollTop <= offsets[i + 1]) &&
                    this.activate(targets[i]);
            }
        },

        activate: function (target) {
            var active, selector;

            this.activeTarget = target;

            $(this.selector).parent('.active').removeClass('active');

            selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';

            active = $(selector).parent('li').addClass('active');

            if (active.parent('.dropdown-menu').length) {
                active = active.closest('li.dropdown').addClass('active');
            }

            active.trigger('activate');
        },
    };

    /* SCROLLSPY PLUGIN DEFINITION
     * =========================== */

    var old = $.fn.scrollspy;

    $.fn.scrollspy = function (option) {
        return this.each(function () {
            var $this = $(this),
                data = $this.data('scrollspy'),
                options = typeof option == 'object' && option;
            if (!data) $this.data('scrollspy', (data = new ScrollSpy(this, options)));
            if (typeof option == 'string') data[option]();
        });
    };

    $.fn.scrollspy.Constructor = ScrollSpy;

    $.fn.scrollspy.defaults = {
        offset: 10,
    };

    /* SCROLLSPY NO CONFLICT
     * ===================== */

    $.fn.scrollspy.noConflict = function () {
        $.fn.scrollspy = old;
        return this;
    };

    /* SCROLLSPY DATA-API
     * ================== */

    $(window).on('load', function () {
        $('[data-spy="scroll"]').each(function () {
            var $spy = $(this);
            $spy.scrollspy($spy.data());
        });
    });
})(window.jQuery);
/* ========================================================
 * bootstrap-tab.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#tabs
 * ========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ======================================================== */

!(function ($) {
    'use strict'; // jshint ;_;

    /* TAB CLASS DEFINITION
     * ==================== */

    var Tab = function (element) {
        this.element = $(element);
    };

    Tab.prototype = {
        constructor: Tab,

        show: function () {
            var $this = this.element,
                $ul = $this.closest('ul:not(.dropdown-menu)'),
                selector = $this.attr('data-target'),
                previous,
                $target,
                e;

            if (!selector) {
                selector = $this.attr('href');
                selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); //strip for ie7
            }

            if ($this.parent('li').hasClass('active')) return;

            previous = $ul.find('.active:last a')[0];

            e = $.Event('show', {
                relatedTarget: previous,
            });

            $this.trigger(e);

            if (e.isDefaultPrevented()) return;

            $target = $(selector);

            this.activate($this.parent('li'), $ul);
            this.activate($target, $target.parent(), function () {
                $this.trigger({
                    type: 'shown',
                    relatedTarget: previous,
                });
            });
        },

        activate: function (element, container, callback) {
            var $active = container.find('> .active'),
                transition = callback && $.support.transition && $active.hasClass('fade');

            function next() {
                $active.removeClass('active').find('> .dropdown-menu > .active').removeClass('active');

                element.addClass('active');

                if (transition) {
                    element[0].offsetWidth; // reflow for transition
                    element.addClass('in');
                } else {
                    element.removeClass('fade');
                }

                if (element.parent('.dropdown-menu')) {
                    element.closest('li.dropdown').addClass('active');
                }

                callback && callback();
            }

            transition ? $active.one($.support.transition.end, next) : next();

            $active.removeClass('in');
        },
    };

    /* TAB PLUGIN DEFINITION
     * ===================== */

    var old = $.fn.tab;

    $.fn.tab = function (option) {
        return this.each(function () {
            var $this = $(this),
                data = $this.data('tab');
            if (!data) $this.data('tab', (data = new Tab(this)));
            if (typeof option == 'string') data[option]();
        });
    };

    $.fn.tab.Constructor = Tab;

    /* TAB NO CONFLICT
     * =============== */

    $.fn.tab.noConflict = function () {
        $.fn.tab = old;
        return this;
    };

    /* TAB DATA-API
     * ============ */

    $(document).on('click.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
        e.preventDefault();
        $(this).tab('show');
    });
})(window.jQuery);
/* ===========================================================
 * bootstrap-tooltip.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#tooltips
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ===========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */

!(function ($) {
    'use strict'; // jshint ;_;

    /* TOOLTIP PUBLIC CLASS DEFINITION
     * =============================== */

    var Tooltip = function (element, options) {
        this.init('tooltip', element, options);
    };

    Tooltip.prototype = {
        constructor: Tooltip,

        init: function (type, element, options) {
            var eventIn, eventOut, triggers, trigger, i;

            this.type = type;
            this.$element = $(element);
            this.options = this.getOptions(options);
            this.enabled = true;

            triggers = this.options.trigger.split(' ');

            for (i = triggers.length; i--; ) {
                trigger = triggers[i];
                if (trigger == 'click') {
                    this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this));
                } else if (trigger != 'manual') {
                    eventIn = trigger == 'hover' ? 'mouseenter' : 'focus';
                    eventOut = trigger == 'hover' ? 'mouseleave' : 'blur';
                    this.$element.on(eventIn + '.' + this.type, this.options.selector, $.proxy(this.enter, this));
                    this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this));
                }
            }

            this.options.selector
                ? (this._options = $.extend({}, this.options, {trigger: 'manual', selector: ''}))
                : this.fixTitle();
        },

        getOptions: function (options) {
            options = $.extend({}, $.fn[this.type].defaults, this.$element.data(), options);

            if (options.delay && typeof options.delay == 'number') {
                options.delay = {
                    show: options.delay,
                    hide: options.delay,
                };
            }

            return options;
        },

        enter: function (e) {
            var defaults = $.fn[this.type].defaults,
                options = {},
                self;

            this._options &&
                $.each(
                    this._options,
                    function (key, value) {
                        if (defaults[key] != value) options[key] = value;
                    },
                    this
                );

            self = $(e.currentTarget)[this.type](options).data(this.type);

            if (!self.options.delay || !self.options.delay.show) return self.show();

            clearTimeout(this.timeout);
            self.hoverState = 'in';
            this.timeout = setTimeout(function () {
                if (self.hoverState == 'in') self.show();
            }, self.options.delay.show);
        },

        leave: function (e) {
            var self = $(e.currentTarget)[this.type](this._options).data(this.type);

            if (this.timeout) clearTimeout(this.timeout);
            if (!self.options.delay || !self.options.delay.hide) return self.hide();

            self.hoverState = 'out';
            this.timeout = setTimeout(function () {
                if (self.hoverState == 'out') self.hide();
            }, self.options.delay.hide);
        },

        show: function () {
            var $tip,
                pos,
                actualWidth,
                actualHeight,
                placement,
                tp,
                e = $.Event('show');

            if (this.hasContent() && this.enabled) {
                this.$element.trigger(e);
                if (e.isDefaultPrevented()) return;
                $tip = this.tip();
                this.setContent();

                if (this.options.animation) {
                    $tip.addClass('fade');
                }

                placement =
                    typeof this.options.placement == 'function'
                        ? this.options.placement.call(this, $tip[0], this.$element[0])
                        : this.options.placement;

                $tip.detach().css({top: 0, left: 0, display: 'block'});

                this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);

                pos = this.getPosition();

                actualWidth = $tip[0].offsetWidth;
                actualHeight = $tip[0].offsetHeight;

                switch (placement) {
                    case 'bottom':
                        tp = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2};
                        break;
                    case 'top':
                        tp = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2};
                        break;
                    case 'left':
                        tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth};
                        break;
                    case 'right':
                        tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width};
                        break;
                }

                this.applyPlacement(tp, placement);
                this.$element.trigger('shown');
            }
        },

        applyPlacement: function (offset, placement) {
            var $tip = this.tip(),
                width = $tip[0].offsetWidth,
                height = $tip[0].offsetHeight,
                actualWidth,
                actualHeight,
                delta,
                replace;

            $tip.offset(offset).addClass(placement).addClass('in');

            actualWidth = $tip[0].offsetWidth;
            actualHeight = $tip[0].offsetHeight;

            if (placement == 'top' && actualHeight != height) {
                offset.top = offset.top + height - actualHeight;
                replace = true;
            }

            if (placement == 'bottom' || placement == 'top') {
                delta = 0;

                if (offset.left < 0) {
                    delta = offset.left * -2;
                    offset.left = 0;
                    $tip.offset(offset);
                    actualWidth = $tip[0].offsetWidth;
                    actualHeight = $tip[0].offsetHeight;
                }

                this.replaceArrow(delta - width + actualWidth, actualWidth, 'left');
            } else {
                this.replaceArrow(actualHeight - height, actualHeight, 'top');
            }

            if (replace) $tip.offset(offset);
        },

        replaceArrow: function (delta, dimension, position) {
            this.arrow().css(position, delta ? 50 * (1 - delta / dimension) + '%' : '');
        },

        setContent: function () {
            var $tip = this.tip(),
                title = this.getTitle();

            $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title);
            $tip.removeClass('fade in top bottom left right');
        },

        hide: function () {
            var that = this,
                $tip = this.tip(),
                e = $.Event('hide');

            this.$element.trigger(e);
            if (e.isDefaultPrevented()) return;

            $tip.removeClass('in');

            function removeWithAnimation() {
                var timeout = setTimeout(function () {
                    $tip.off($.support.transition.end).detach();
                }, 500);

                $tip.one($.support.transition.end, function () {
                    clearTimeout(timeout);
                    $tip.detach();
                });
            }

            $.support.transition && this.$tip.hasClass('fade') ? removeWithAnimation() : $tip.detach();

            this.$element.trigger('hidden');

            return this;
        },

        fixTitle: function () {
            var $e = this.$element;
            if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
                $e.attr('data-original-title', $e.attr('title') || '').attr('title', '');
            }
        },

        hasContent: function () {
            return this.getTitle();
        },

        getPosition: function () {
            var el = this.$element[0];
            var offset;
            try {
                offset = el.getBoundingClientRect();
            } catch (e) {
                offset = {
                    top: el.offsetTop,
                    left: el.offsetLeft,
                };
            }
            return $.extend({}, offset, this.$element.offset());
        },

        getTitle: function () {
            var title,
                $e = this.$element,
                o = this.options;

            title = $e.attr('data-original-title') || (typeof o.title == 'function' ? o.title.call($e[0]) : o.title);

            return title;
        },

        tip: function () {
            return (this.$tip = this.$tip || $(this.options.template));
        },

        arrow: function () {
            return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'));
        },

        validate: function () {
            if (!this.$element[0].parentNode) {
                this.hide();
                this.$element = null;
                this.options = null;
            }
        },

        enable: function () {
            this.enabled = true;
        },

        disable: function () {
            this.enabled = false;
        },

        toggleEnabled: function () {
            this.enabled = !this.enabled;
        },

        toggle: function (e) {
            var self = e ? $(e.currentTarget)[this.type](this._options).data(this.type) : this;
            self.tip().hasClass('in') ? self.hide() : self.show();
        },

        destroy: function () {
            this.hide()
                .$element.off('.' + this.type)
                .removeData(this.type);
        },
    };

    /* TOOLTIP PLUGIN DEFINITION
     * ========================= */

    var old = $.fn.tooltip;

    $.fn.tooltip = function (option) {
        return this.each(function () {
            var $this = $(this),
                data = $this.data('tooltip'),
                options = typeof option == 'object' && option;
            if (!data) $this.data('tooltip', (data = new Tooltip(this, options)));
            if (typeof option == 'string') data[option]();
        });
    };

    $.fn.tooltip.Constructor = Tooltip;

    $.fn.tooltip.defaults = {
        animation: true,
        placement: 'top',
        selector: false,
        template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: 'hover focus',
        title: '',
        delay: 0,
        html: false,
        container: false,
    };

    /* TOOLTIP NO CONFLICT
     * =================== */

    $.fn.tooltip.noConflict = function () {
        $.fn.tooltip = old;
        return this;
    };
})(window.jQuery);

/* ===========================================================
 * bootstrap-popover.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#popovers
 * ===========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =========================================================== */

!(function ($) {
    'use strict'; // jshint ;_;

    /* POPOVER PUBLIC CLASS DEFINITION
     * =============================== */

    var Popover = function (element, options) {
        this.init('popover', element, options);
    };

    /* NOTE: POPOVER EXTENDS BOOTSTRAP-TOOLTIP.js
     ========================================== */

    Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype, {
        constructor: Popover,

        setContent: function () {
            var $tip = this.tip(),
                title = this.getTitle(),
                content = this.getContent();

            $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title);
            $tip.find('.popover-content')[this.options.html ? 'html' : 'text'](content);

            $tip.removeClass('fade top bottom left right in');
        },

        hasContent: function () {
            return this.getTitle() || this.getContent();
        },

        getContent: function () {
            var content,
                $e = this.$element,
                o = this.options;

            content = (typeof o.content == 'function' ? o.content.call($e[0]) : o.content) || $e.attr('data-content');

            return content;
        },

        tip: function () {
            if (!this.$tip) {
                this.$tip = $(this.options.template);
            }
            return this.$tip;
        },

        destroy: function () {
            this.hide()
                .$element.off('.' + this.type)
                .removeData(this.type);
        },
    });

    /* POPOVER PLUGIN DEFINITION
     * ======================= */

    var old = $.fn.popover;

    $.fn.popover = function (option) {
        return this.each(function () {
            var $this = $(this),
                data = $this.data('popover'),
                options = typeof option == 'object' && option;
            if (!data) $this.data('popover', (data = new Popover(this, options)));
            if (typeof option == 'string') data[option]();
        });
    };

    $.fn.popover.Constructor = Popover;

    $.fn.popover.defaults = $.extend({}, $.fn.tooltip.defaults, {
        placement: 'right',
        trigger: 'click',
        content: '',
        template:
            '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>',
    });

    /* POPOVER NO CONFLICT
     * =================== */

    $.fn.popover.noConflict = function () {
        $.fn.popover = old;
        return this;
    };
})(window.jQuery);

/* ==========================================================
 * bootstrap-affix.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#affix
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */

!(function ($) {
    'use strict'; // jshint ;_;

    /* AFFIX CLASS DEFINITION
     * ====================== */

    var Affix = function (element, options) {
        this.options = $.extend({}, $.fn.affix.defaults, options);
        this.$window = $(window)
            .on('scroll.affix.data-api', $.proxy(this.checkPosition, this))
            .on(
                'click.affix.data-api',
                $.proxy(function () {
                    setTimeout($.proxy(this.checkPosition, this), 1);
                }, this)
            );
        this.$element = $(element);
        this.checkPosition();
    };

    Affix.prototype.checkPosition = function () {
        if (!this.$element.is(':visible')) return;

        var scrollHeight = $(document).height(),
            scrollTop = this.$window.scrollTop(),
            position = this.$element.offset(),
            offset = this.options.offset,
            offsetBottom = offset.bottom,
            offsetTop = offset.top,
            reset = 'affix affix-top affix-bottom',
            affix;

        if (typeof offset != 'object') offsetBottom = offsetTop = offset;
        if (typeof offsetTop == 'function') offsetTop = offset.top();
        if (typeof offsetBottom == 'function') offsetBottom = offset.bottom();

        affix =
            this.unpin != null && scrollTop + this.unpin <= position.top
                ? false
                : offsetBottom != null && position.top + this.$element.height() >= scrollHeight - offsetBottom
                ? 'bottom'
                : offsetTop != null && scrollTop <= offsetTop
                ? 'top'
                : false;

        if (this.affixed === affix) return;

        this.affixed = affix;
        this.unpin = affix == 'bottom' ? position.top - scrollTop : null;

        this.$element.removeClass(reset).addClass('affix' + (affix ? '-' + affix : ''));
    };

    /* AFFIX PLUGIN DEFINITION
     * ======================= */

    var old = $.fn.affix;

    $.fn.affix = function (option) {
        return this.each(function () {
            var $this = $(this),
                data = $this.data('affix'),
                options = typeof option == 'object' && option;
            if (!data) $this.data('affix', (data = new Affix(this, options)));
            if (typeof option == 'string') data[option]();
        });
    };

    $.fn.affix.Constructor = Affix;

    $.fn.affix.defaults = {
        offset: 0,
    };

    /* AFFIX NO CONFLICT
     * ================= */

    $.fn.affix.noConflict = function () {
        $.fn.affix = old;
        return this;
    };

    /* AFFIX DATA-API
     * ============== */

    $(window).on('load', function () {
        $('[data-spy="affix"]').each(function () {
            var $spy = $(this),
                data = $spy.data();

            data.offset = data.offset || {};

            data.offsetBottom && (data.offset.bottom = data.offsetBottom);
            data.offsetTop && (data.offset.top = data.offsetTop);

            $spy.affix(data);
        });
    });
})(window.jQuery);
/* ==========================================================
 * bootstrap-alert.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#alerts
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */

!(function ($) {
    'use strict'; // jshint ;_;

    /* ALERT CLASS DEFINITION
     * ====================== */

    var dismiss = '[data-dismiss="alert"]',
        Alert = function (el) {
            $(el).on('click', dismiss, this.close);
        };

    Alert.prototype.close = function (e) {
        var $this = $(this),
            selector = $this.attr('data-target'),
            $parent;

        if (!selector) {
            selector = $this.attr('href');
            selector = selector && selector.replace(/.*(?=#[^\s]*$)/, ''); //strip for ie7
        }

        $parent = $(selector);

        e && e.preventDefault();

        $parent.length || ($parent = $this.hasClass('alert') ? $this : $this.parent());

        $parent.trigger((e = $.Event('close')));

        if (e.isDefaultPrevented()) return;

        $parent.removeClass('in');

        function removeElement() {
            $parent.trigger('closed').remove();
        }

        $.support.transition && $parent.hasClass('fade')
            ? $parent.on($.support.transition.end, removeElement)
            : removeElement();
    };

    /* ALERT PLUGIN DEFINITION
     * ======================= */

    var old = $.fn.alert;

    $.fn.alert = function (option) {
        return this.each(function () {
            var $this = $(this),
                data = $this.data('alert');
            if (!data) $this.data('alert', (data = new Alert(this)));
            if (typeof option == 'string') data[option].call($this);
        });
    };

    $.fn.alert.Constructor = Alert;

    /* ALERT NO CONFLICT
     * ================= */

    $.fn.alert.noConflict = function () {
        $.fn.alert = old;
        return this;
    };

    /* ALERT DATA-API
     * ============== */

    $(document).on('click.alert.data-api', dismiss, Alert.prototype.close);
})(window.jQuery);
/* ============================================================
 * bootstrap-button.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#buttons
 * ============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */

!(function ($) {
    'use strict'; // jshint ;_;

    /* BUTTON PUBLIC CLASS DEFINITION
     * ============================== */

    var Button = function (element, options) {
        this.$element = $(element);
        this.options = $.extend({}, $.fn.button.defaults, options);
    };

    Button.prototype.setState = function (state) {
        var d = 'disabled',
            $el = this.$element,
            data = $el.data(),
            val = $el.is('input') ? 'val' : 'html';

        state = state + 'Text';
        data.resetText || $el.data('resetText', $el[val]());

        $el[val](data[state] || this.options[state]);

        // push to event loop to allow forms to submit
        setTimeout(function () {
            state == 'loadingText' ? $el.addClass(d).attr(d, d) : $el.removeClass(d).removeAttr(d);
        }, 0);
    };

    Button.prototype.toggle = function () {
        var $parent = this.$element.closest('[data-toggle="buttons-radio"]');

        $parent && $parent.find('.active').removeClass('active');

        this.$element.toggleClass('active');
    };

    /* BUTTON PLUGIN DEFINITION
     * ======================== */

    var old = $.fn.button;

    $.fn.button = function (option) {
        return this.each(function () {
            var $this = $(this),
                data = $this.data('button'),
                options = typeof option == 'object' && option;
            if (!data) $this.data('button', (data = new Button(this, options)));
            if (option == 'toggle') data.toggle();
            else if (option) data.setState(option);
        });
    };

    $.fn.button.defaults = {
        loadingText: 'loading...',
    };

    $.fn.button.Constructor = Button;

    /* BUTTON NO CONFLICT
     * ================== */

    $.fn.button.noConflict = function () {
        $.fn.button = old;
        return this;
    };

    /* BUTTON DATA-API
     * =============== */

    $(document).on('click.button.data-api', '[data-toggle^=button]', function (e) {
        var $btn = $(e.target);
        if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn');
        $btn.button('toggle');
    });
})(window.jQuery);

/* ==========================================================
 * bootstrap-carousel.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#carousel
 * ==========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */

!(function ($) {
    'use strict'; // jshint ;_;

    /* CAROUSEL CLASS DEFINITION
     * ========================= */

    var Carousel = function (element, options) {
        this.$element = $(element);
        this.$indicators = this.$element.find('.carousel-indicators');
        this.options = options;
        this.options.pause == 'hover' &&
            this.$element.on('mouseenter', $.proxy(this.pause, this)).on('mouseleave', $.proxy(this.cycle, this));
    };

    Carousel.prototype = {
        cycle: function (e) {
            if (!e) this.paused = false;
            if (this.interval) clearInterval(this.interval);
            this.options.interval &&
                !this.paused &&
                (this.interval = setInterval($.proxy(this.next, this), this.options.interval));
            return this;
        },

        getActiveIndex: function () {
            this.$active = this.$element.find('.item.active');
            this.$items = this.$active.parent().children();
            return this.$items.index(this.$active);
        },

        to: function (pos) {
            var activeIndex = this.getActiveIndex(),
                that = this;

            if (pos > this.$items.length - 1 || pos < 0) return;

            if (this.sliding) {
                return this.$element.one('slid', function () {
                    that.to(pos);
                });
            }

            if (activeIndex == pos) {
                return this.pause().cycle();
            }

            return this.slide(pos > activeIndex ? 'next' : 'prev', $(this.$items[pos]));
        },

        pause: function (e) {
            if (!e) this.paused = true;
            if (this.$element.find('.next, .prev').length && $.support.transition.end) {
                this.$element.trigger($.support.transition.end);
                this.cycle(true);
            }
            clearInterval(this.interval);
            this.interval = null;
            return this;
        },

        next: function () {
            if (this.sliding) return;
            return this.slide('next');
        },

        prev: function () {
            if (this.sliding) return;
            return this.slide('prev');
        },

        slide: function (type, next) {
            var $active = this.$element.find('.item.active'),
                $next = next || $active[type](),
                isCycling = this.interval,
                direction = type == 'next' ? 'left' : 'right',
                fallback = type == 'next' ? 'first' : 'last',
                that = this,
                e;

            this.sliding = true;

            isCycling && this.pause();

            $next = $next.length ? $next : this.$element.find('.item')[fallback]();

            e = $.Event('slide', {
                relatedTarget: $next[0],
                direction: direction,
            });

            if ($next.hasClass('active')) return;

            if (this.$indicators.length) {
                this.$indicators.find('.active').removeClass('active');
                this.$element.one('slid', function () {
                    var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()]);
                    $nextIndicator && $nextIndicator.addClass('active');
                });
            }

            if ($.support.transition && this.$element.hasClass('slide')) {
                this.$element.trigger(e);
                if (e.isDefaultPrevented()) return;
                $next.addClass(type);
                $next[0].offsetWidth; // force reflow
                $active.addClass(direction);
                $next.addClass(direction);
                this.$element.one($.support.transition.end, function () {
                    $next.removeClass([type, direction].join(' ')).addClass('active');
                    $active.removeClass(['active', direction].join(' '));
                    that.sliding = false;
                    setTimeout(function () {
                        that.$element.trigger('slid');
                    }, 0);
                });
            } else {
                this.$element.trigger(e);
                if (e.isDefaultPrevented()) return;
                $active.removeClass('active');
                $next.addClass('active');
                this.sliding = false;
                this.$element.trigger('slid');
            }

            isCycling && this.cycle();

            return this;
        },
    };

    /* CAROUSEL PLUGIN DEFINITION
     * ========================== */

    var old = $.fn.carousel;

    $.fn.carousel = function (option) {
        return this.each(function () {
            var $this = $(this),
                data = $this.data('carousel'),
                options = $.extend({}, $.fn.carousel.defaults, typeof option == 'object' && option),
                action = typeof option == 'string' ? option : options.slide;
            if (!data) $this.data('carousel', (data = new Carousel(this, options)));
            if (typeof option == 'number') data.to(option);
            else if (action) data[action]();
            else if (options.interval) data.pause().cycle();
        });
    };

    $.fn.carousel.defaults = {
        interval: 5000,
        pause: 'hover',
    };

    $.fn.carousel.Constructor = Carousel;

    /* CAROUSEL NO CONFLICT
     * ==================== */

    $.fn.carousel.noConflict = function () {
        $.fn.carousel = old;
        return this;
    };

    /* CAROUSEL DATA-API
     * ================= */

    $(document).on('click.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {
        var $this = $(this),
            href,
            $target = $(
                $this.attr('data-target') || ((href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, ''))
            ), //strip for ie7
            options = $.extend({}, $target.data(), $this.data()),
            slideIndex;

        $target.carousel(options);

        if ((slideIndex = $this.attr('data-slide-to'))) {
            $target.data('carousel').pause().to(slideIndex).cycle();
        }

        e.preventDefault();
    });
})(window.jQuery);
/* =============================================================
 * bootstrap-typeahead.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#typeahead
 * =============================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============================================================ */

!(function ($) {
    'use strict'; // jshint ;_;

    /* TYPEAHEAD PUBLIC CLASS DEFINITION
     * ================================= */

    var Typeahead = function (element, options) {
        this.$element = $(element);
        this.options = $.extend({}, $.fn.typeahead.defaults, options);
        this.matcher = this.options.matcher || this.matcher;
        this.sorter = this.options.sorter || this.sorter;
        this.highlighter = this.options.highlighter || this.highlighter;
        this.updater = this.options.updater || this.updater;
        this.source = this.options.source;
        this.$menu = $(this.options.menu);
        this.shown = false;
        this.listen();
    };

    Typeahead.prototype = {
        constructor: Typeahead,

        select: function () {
            var val = this.$menu.find('.active').attr('data-value');
            this.$element.val(this.updater(val)).change();
            return this.hide();
        },

        updater: function (item) {
            return item;
        },

        show: function () {
            var pos = $.extend({}, this.$element.position(), {
                height: this.$element[0].offsetHeight,
            });

            this.$menu
                .insertAfter(this.$element)
                .css({
                    top: pos.top + pos.height,
                    left: pos.left,
                })
                .show();

            this.shown = true;
            return this;
        },

        hide: function () {
            this.$menu.hide();
            this.shown = false;
            return this;
        },

        lookup: function (event) {
            var items;

            this.query = this.$element.val();

            if (!this.query || this.query.length < this.options.minLength) {
                return this.shown ? this.hide() : this;
            }

            items = $.isFunction(this.source) ? this.source(this.query, $.proxy(this.process, this)) : this.source;

            return items ? this.process(items) : this;
        },

        process: function (items) {
            var that = this;

            items = $.grep(items, function (item) {
                return that.matcher(item);
            });

            items = this.sorter(items);

            if (!items.length) {
                return this.shown ? this.hide() : this;
            }

            return this.render(items.slice(0, this.options.items)).show();
        },

        matcher: function (item) {
            return ~item.toLowerCase().indexOf(this.query.toLowerCase());
        },

        sorter: function (items) {
            var beginswith = [],
                caseSensitive = [],
                caseInsensitive = [],
                item;

            while ((item = items.shift())) {
                if (!item.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(item);
                else if (~item.indexOf(this.query)) caseSensitive.push(item);
                else caseInsensitive.push(item);
            }

            return beginswith.concat(caseSensitive, caseInsensitive);
        },

        highlighter: function (item) {
            var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
            return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
                return '<strong>' + match + '</strong>';
            });
        },

        render: function (items) {
            var that = this;

            items = $(items).map(function (i, item) {
                i = $(that.options.item).attr('data-value', item);
                i.find('a').html(that.highlighter(item));
                return i[0];
            });

            items.first().addClass('active');
            this.$menu.html(items);
            return this;
        },

        next: function (event) {
            var active = this.$menu.find('.active').removeClass('active'),
                next = active.next();

            if (!next.length) {
                next = $(this.$menu.find('li')[0]);
            }

            next.addClass('active');
        },

        prev: function (event) {
            var active = this.$menu.find('.active').removeClass('active'),
                prev = active.prev();

            if (!prev.length) {
                prev = this.$menu.find('li').last();
            }

            prev.addClass('active');
        },

        listen: function () {
            this.$element
                .on('focus', $.proxy(this.focus, this))
                .on('blur', $.proxy(this.blur, this))
                .on('keypress', $.proxy(this.keypress, this))
                .on('keyup', $.proxy(this.keyup, this));

            if (this.eventSupported('keydown')) {
                this.$element.on('keydown', $.proxy(this.keydown, this));
            }

            this.$menu
                .on('click', $.proxy(this.click, this))
                .on('mouseenter', 'li', $.proxy(this.mouseenter, this))
                .on('mouseleave', 'li', $.proxy(this.mouseleave, this));
        },

        eventSupported: function (eventName) {
            var isSupported = eventName in this.$element;
            if (!isSupported) {
                this.$element.setAttribute(eventName, 'return;');
                isSupported = typeof this.$element[eventName] === 'function';
            }
            return isSupported;
        },

        move: function (e) {
            if (!this.shown) return;

            switch (e.keyCode) {
                case 9: // tab
                case 13: // enter
                case 27: // escape
                    e.preventDefault();
                    break;

                case 38: // up arrow
                    e.preventDefault();
                    this.prev();
                    break;

                case 40: // down arrow
                    e.preventDefault();
                    this.next();
                    break;
            }

            e.stopPropagation();
        },

        keydown: function (e) {
            this.suppressKeyPressRepeat = ~$.inArray(e.keyCode, [40, 38, 9, 13, 27]);
            this.move(e);
        },

        keypress: function (e) {
            if (this.suppressKeyPressRepeat) return;
            this.move(e);
        },

        keyup: function (e) {
            switch (e.keyCode) {
                case 40: // down arrow
                case 38: // up arrow
                case 16: // shift
                case 17: // ctrl
                case 18: // alt
                    break;

                case 9: // tab
                case 13: // enter
                    if (!this.shown) return;
                    this.select();
                    break;

                case 27: // escape
                    if (!this.shown) return;
                    this.hide();
                    break;

                default:
                    this.lookup();
            }

            e.stopPropagation();
            e.preventDefault();
        },

        focus: function (e) {
            this.focused = true;
        },

        blur: function (e) {
            this.focused = false;
            if (!this.mousedover && this.shown) this.hide();
        },

        click: function (e) {
            e.stopPropagation();
            e.preventDefault();
            this.select();
            this.$element.focus();
        },

        mouseenter: function (e) {
            this.mousedover = true;
            this.$menu.find('.active').removeClass('active');
            $(e.currentTarget).addClass('active');
        },

        mouseleave: function (e) {
            this.mousedover = false;
            if (!this.focused && this.shown) this.hide();
        },
    };

    /* TYPEAHEAD PLUGIN DEFINITION
     * =========================== */

    var old = $.fn.typeahead;

    $.fn.typeahead = function (option) {
        return this.each(function () {
            var $this = $(this),
                data = $this.data('typeahead'),
                options = typeof option == 'object' && option;
            if (!data) $this.data('typeahead', (data = new Typeahead(this, options)));
            if (typeof option == 'string') data[option]();
        });
    };

    $.fn.typeahead.defaults = {
        source: [],
        items: 8,
        menu: '<ul class="typeahead dropdown-menu"></ul>',
        item: '<li><a href="#"></a></li>',
        minLength: 1,
    };

    $.fn.typeahead.Constructor = Typeahead;

    /* TYPEAHEAD NO CONFLICT
     * =================== */

    $.fn.typeahead.noConflict = function () {
        $.fn.typeahead = old;
        return this;
    };

    /* TYPEAHEAD DATA-API
     * ================== */

    $(document).on('focus.typeahead.data-api', '[data-provide="typeahead"]', function (e) {
        var $this = $(this);
        if ($this.data('typeahead')) return;
        $this.typeahead($this.data());
    });
})(window.jQuery);

/*!
 * Timepicker Component for Twitter Bootstrap
 *
 * Copyright 2013 Joris de Wit
 *
 * Contributors https://github.com/jdewit/bootstrap-timepicker/graphs/contributors
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
(function ($, window, document, undefined) {
    'use strict';

    // TIMEPICKER PUBLIC CLASS DEFINITION
    var Timepicker = function (element, options) {
        this.widget = '';
        this.$element = $(element);
        this.defaultTime = options.defaultTime;
        this.disableFocus = options.disableFocus;
        this.disableMousewheel = options.disableMousewheel;
        this.isOpen = options.isOpen;
        this.minuteStep = options.minuteStep;
        this.modalBackdrop = options.modalBackdrop;
        this.orientation = options.orientation;
        this.secondStep = options.secondStep;
        this.showInputs = options.showInputs;
        this.showMeridian = options.showMeridian;
        this.showSeconds = options.showSeconds;
        this.template = options.template;
        this.appendWidgetTo = options.appendWidgetTo;
        this.showWidgetOnAddonClick = options.showWidgetOnAddonClick;

        this._init();
    };

    Timepicker.prototype = {
        constructor: Timepicker,
        _init: function () {
            var self = this;

            if (
                this.showWidgetOnAddonClick &&
                (this.$element.parent().hasClass('input-append') || this.$element.parent().hasClass('input-prepend'))
            ) {
                this.$element
                    .parent('.input-append, .input-prepend')
                    .find('.add-on')
                    .on({
                        'click.timepicker': $.proxy(this.showWidget, this),
                    });
                this.$element.on({
                    'focus.timepicker': $.proxy(this.highlightUnit, this),
                    'click.timepicker': $.proxy(this.highlightUnit, this),
                    'keydown.timepicker': $.proxy(this.elementKeydown, this),
                    'blur.timepicker': $.proxy(this.blurElement, this),
                    'mousewheel.timepicker DOMMouseScroll.timepicker': $.proxy(this.mousewheel, this),
                });
            } else {
                if (this.template) {
                    this.$element.on({
                        'focus.timepicker': $.proxy(this.showWidget, this),
                        'click.timepicker': $.proxy(this.showWidget, this),
                        'blur.timepicker': $.proxy(this.blurElement, this),
                        'mousewheel.timepicker DOMMouseScroll.timepicker': $.proxy(this.mousewheel, this),
                    });
                } else {
                    this.$element.on({
                        'focus.timepicker': $.proxy(this.highlightUnit, this),
                        'click.timepicker': $.proxy(this.highlightUnit, this),
                        'keydown.timepicker': $.proxy(this.elementKeydown, this),
                        'blur.timepicker': $.proxy(this.blurElement, this),
                        'mousewheel.timepicker DOMMouseScroll.timepicker': $.proxy(this.mousewheel, this),
                    });
                }
            }

            if (this.template !== false) {
                this.$widget = $(this.getTemplate()).on('click', $.proxy(this.widgetClick, this));
            } else {
                this.$widget = false;
            }

            if (this.showInputs && this.$widget !== false) {
                this.$widget.find('input').each(function () {
                    $(this).on({
                        'click.timepicker': function () {
                            $(this).select();
                        },
                        'keydown.timepicker': $.proxy(self.widgetKeydown, self),
                        'keyup.timepicker': $.proxy(self.widgetKeyup, self),
                    });
                });
            }

            this.setDefaultTime(this.defaultTime);
        },

        blurElement: function () {
            this.highlightedUnit = null;
            this.updateFromElementVal();
        },

        clear: function () {
            this.hour = '';
            this.minute = '';
            this.second = '';
            this.meridian = '';

            this.$element.val('');
        },

        decrementHour: function () {
            if (this.showMeridian) {
                if (this.hour === 1) {
                    this.hour = 12;
                } else if (this.hour === 12) {
                    this.hour--;

                    return this.toggleMeridian();
                } else if (this.hour === 0) {
                    this.hour = 11;

                    return this.toggleMeridian();
                } else {
                    this.hour--;
                }
            } else {
                if (this.hour <= 0) {
                    this.hour = 23;
                } else {
                    this.hour--;
                }
            }
        },

        decrementMinute: function (step) {
            var newVal;

            if (step) {
                newVal = this.minute - step;
            } else {
                newVal = this.minute - this.minuteStep;
            }

            if (newVal < 0) {
                this.decrementHour();
                this.minute = newVal + 60;
            } else {
                this.minute = newVal;
            }
        },

        decrementSecond: function () {
            var newVal = this.second - this.secondStep;

            if (newVal < 0) {
                this.decrementMinute(true);
                this.second = newVal + 60;
            } else {
                this.second = newVal;
            }
        },

        elementKeydown: function (e) {
            switch (e.keyCode) {
                case 9: //tab
                case 27: // escape
                    this.updateFromElementVal();
                    break;
                case 37: // left arrow
                    e.preventDefault();
                    this.highlightPrevUnit();
                    break;
                case 38: // up arrow
                    e.preventDefault();
                    switch (this.highlightedUnit) {
                        case 'hour':
                            this.incrementHour();
                            this.highlightHour();
                            break;
                        case 'minute':
                            this.incrementMinute();
                            this.highlightMinute();
                            break;
                        case 'second':
                            this.incrementSecond();
                            this.highlightSecond();
                            break;
                        case 'meridian':
                            this.toggleMeridian();
                            this.highlightMeridian();
                            break;
                    }
                    this.update();
                    break;
                case 39: // right arrow
                    e.preventDefault();
                    this.highlightNextUnit();
                    break;
                case 40: // down arrow
                    e.preventDefault();
                    switch (this.highlightedUnit) {
                        case 'hour':
                            this.decrementHour();
                            this.highlightHour();
                            break;
                        case 'minute':
                            this.decrementMinute();
                            this.highlightMinute();
                            break;
                        case 'second':
                            this.decrementSecond();
                            this.highlightSecond();
                            break;
                        case 'meridian':
                            this.toggleMeridian();
                            this.highlightMeridian();
                            break;
                    }

                    this.update();
                    break;
            }
        },

        getCursorPosition: function () {
            var input = this.$element.get(0);

            if ('selectionStart' in input) {
                // Standard-compliant browsers

                return input.selectionStart;
            } else if (document.selection) {
                // IE fix
                input.focus();
                var sel = document.selection.createRange(),
                    selLen = document.selection.createRange().text.length;

                sel.moveStart('character', -input.value.length);

                return sel.text.length - selLen;
            }
        },

        getTemplate: function () {
            var template, hourTemplate, minuteTemplate, secondTemplate, meridianTemplate, templateContent;

            if (this.showInputs) {
                hourTemplate = '<input type="text" class="bootstrap-timepicker-hour" maxlength="2"/>';
                minuteTemplate = '<input type="text" class="bootstrap-timepicker-minute" maxlength="2"/>';
                secondTemplate = '<input type="text" class="bootstrap-timepicker-second" maxlength="2"/>';
                meridianTemplate = '<input type="text" class="bootstrap-timepicker-meridian" maxlength="2"/>';
            } else {
                hourTemplate = '<span class="bootstrap-timepicker-hour"></span>';
                minuteTemplate = '<span class="bootstrap-timepicker-minute"></span>';
                secondTemplate = '<span class="bootstrap-timepicker-second"></span>';
                meridianTemplate = '<span class="bootstrap-timepicker-meridian"></span>';
            }

            templateContent =
                '<table>' +
                '<tr>' +
                '<td><a href="#" data-action="incrementHour"><i class="icon-chevron-up"></i></a></td>' +
                '<td class="separator">&nbsp;</td>' +
                '<td><a href="#" data-action="incrementMinute"><i class="icon-chevron-up"></i></a></td>' +
                (this.showSeconds
                    ? '<td class="separator">&nbsp;</td>' +
                      '<td><a href="#" data-action="incrementSecond"><i class="icon-chevron-up"></i></a></td>'
                    : '') +
                (this.showMeridian
                    ? '<td class="separator">&nbsp;</td>' +
                      '<td class="meridian-column"><a href="#" data-action="toggleMeridian"><i class="icon-chevron-up"></i></a></td>'
                    : '') +
                '</tr>' +
                '<tr>' +
                '<td>' +
                hourTemplate +
                '</td> ' +
                '<td class="separator">:</td>' +
                '<td>' +
                minuteTemplate +
                '</td> ' +
                (this.showSeconds ? '<td class="separator">:</td>' + '<td>' + secondTemplate + '</td>' : '') +
                (this.showMeridian ? '<td class="separator">&nbsp;</td>' + '<td>' + meridianTemplate + '</td>' : '') +
                '</tr>' +
                '<tr>' +
                '<td><a href="#" data-action="decrementHour"><i class="icon-chevron-down"></i></a></td>' +
                '<td class="separator"></td>' +
                '<td><a href="#" data-action="decrementMinute"><i class="icon-chevron-down"></i></a></td>' +
                (this.showSeconds
                    ? '<td class="separator">&nbsp;</td>' +
                      '<td><a href="#" data-action="decrementSecond"><i class="icon-chevron-down"></i></a></td>'
                    : '') +
                (this.showMeridian
                    ? '<td class="separator">&nbsp;</td>' +
                      '<td><a href="#" data-action="toggleMeridian"><i class="icon-chevron-down"></i></a></td>'
                    : '') +
                '</tr>' +
                '</table>';

            switch (this.template) {
                case 'modal':
                    template =
                        '<div class="bootstrap-timepicker-widget modal hide fade in" data-backdrop="' +
                        (this.modalBackdrop ? 'true' : 'false') +
                        '">' +
                        '<div class="modal-header">' +
                        '<a href="#" class="close" data-dismiss="modal">×</a>' +
                        '<h3>Pick a Time</h3>' +
                        '</div>' +
                        '<div class="modal-content">' +
                        templateContent +
                        '</div>' +
                        '<div class="modal-footer">' +
                        '<a href="#" class="btn btn-primary" data-dismiss="modal">OK</a>' +
                        '</div>' +
                        '</div>';
                    break;
                case 'dropdown':
                    template = '<div class="bootstrap-timepicker-widget dropdown-menu">' + templateContent + '</div>';
                    break;
            }

            return template;
        },

        getTime: function () {
            if (this.hour === '') {
                return '';
            }

            return (
                this.hour +
                ':' +
                (this.minute.toString().length === 1 ? '0' + this.minute : this.minute) +
                (this.showSeconds
                    ? ':' + (this.second.toString().length === 1 ? '0' + this.second : this.second)
                    : '') +
                (this.showMeridian ? ' ' + this.meridian : '')
            );
        },

        hideWidget: function () {
            if (this.isOpen === false) {
                return;
            }

            this.$element.trigger({
                type: 'hide.timepicker',
                time: {
                    value: this.getTime(),
                    hours: this.hour,
                    minutes: this.minute,
                    seconds: this.second,
                    meridian: this.meridian,
                },
            });

            if (this.template === 'modal' && this.$widget.modal) {
                this.$widget.modal('hide');
            } else {
                this.$widget.removeClass('open');
            }

            $(document).off('mousedown.timepicker, touchend.timepicker');

            this.isOpen = false;
            // show/hide approach taken by datepicker
            this.$widget.detach();
        },

        highlightUnit: function () {
            this.position = this.getCursorPosition();
            if (this.position >= 0 && this.position <= 2) {
                this.highlightHour();
            } else if (this.position >= 3 && this.position <= 5) {
                this.highlightMinute();
            } else if (this.position >= 6 && this.position <= 8) {
                if (this.showSeconds) {
                    this.highlightSecond();
                } else {
                    this.highlightMeridian();
                }
            } else if (this.position >= 9 && this.position <= 11) {
                this.highlightMeridian();
            }
        },

        highlightNextUnit: function () {
            switch (this.highlightedUnit) {
                case 'hour':
                    this.highlightMinute();
                    break;
                case 'minute':
                    if (this.showSeconds) {
                        this.highlightSecond();
                    } else if (this.showMeridian) {
                        this.highlightMeridian();
                    } else {
                        this.highlightHour();
                    }
                    break;
                case 'second':
                    if (this.showMeridian) {
                        this.highlightMeridian();
                    } else {
                        this.highlightHour();
                    }
                    break;
                case 'meridian':
                    this.highlightHour();
                    break;
            }
        },

        highlightPrevUnit: function () {
            switch (this.highlightedUnit) {
                case 'hour':
                    if (this.showMeridian) {
                        this.highlightMeridian();
                    } else if (this.showSeconds) {
                        this.highlightSecond();
                    } else {
                        this.highlightMinute();
                    }
                    break;
                case 'minute':
                    this.highlightHour();
                    break;
                case 'second':
                    this.highlightMinute();
                    break;
                case 'meridian':
                    if (this.showSeconds) {
                        this.highlightSecond();
                    } else {
                        this.highlightMinute();
                    }
                    break;
            }
        },

        highlightHour: function () {
            var $element = this.$element.get(0),
                self = this;

            this.highlightedUnit = 'hour';

            if ($element.setSelectionRange) {
                setTimeout(function () {
                    if (self.hour < 10) {
                        $element.setSelectionRange(0, 1);
                    } else {
                        $element.setSelectionRange(0, 2);
                    }
                }, 0);
            }
        },

        highlightMinute: function () {
            var $element = this.$element.get(0),
                self = this;

            this.highlightedUnit = 'minute';

            if ($element.setSelectionRange) {
                setTimeout(function () {
                    if (self.hour < 10) {
                        $element.setSelectionRange(2, 4);
                    } else {
                        $element.setSelectionRange(3, 5);
                    }
                }, 0);
            }
        },

        highlightSecond: function () {
            var $element = this.$element.get(0),
                self = this;

            this.highlightedUnit = 'second';

            if ($element.setSelectionRange) {
                setTimeout(function () {
                    if (self.hour < 10) {
                        $element.setSelectionRange(5, 7);
                    } else {
                        $element.setSelectionRange(6, 8);
                    }
                }, 0);
            }
        },

        highlightMeridian: function () {
            var $element = this.$element.get(0),
                self = this;

            this.highlightedUnit = 'meridian';

            if ($element.setSelectionRange) {
                if (this.showSeconds) {
                    setTimeout(function () {
                        if (self.hour < 10) {
                            $element.setSelectionRange(8, 10);
                        } else {
                            $element.setSelectionRange(9, 11);
                        }
                    }, 0);
                } else {
                    setTimeout(function () {
                        if (self.hour < 10) {
                            $element.setSelectionRange(5, 7);
                        } else {
                            $element.setSelectionRange(6, 8);
                        }
                    }, 0);
                }
            }
        },

        incrementHour: function () {
            if (this.showMeridian) {
                if (this.hour === 11) {
                    this.hour++;
                    return this.toggleMeridian();
                } else if (this.hour === 12) {
                    this.hour = 0;
                }
            }
            if (this.hour === 23) {
                this.hour = 0;

                return;
            }
            this.hour++;
        },

        incrementMinute: function (step) {
            var newVal;

            if (step) {
                newVal = this.minute + step;
            } else {
                newVal = this.minute + this.minuteStep - (this.minute % this.minuteStep);
            }

            if (newVal > 59) {
                this.incrementHour();
                this.minute = newVal - 60;
            } else {
                this.minute = newVal;
            }
        },

        incrementSecond: function () {
            var newVal = this.second + this.secondStep - (this.second % this.secondStep);

            if (newVal > 59) {
                this.incrementMinute(true);
                this.second = newVal - 60;
            } else {
                this.second = newVal;
            }
        },

        mousewheel: function (e) {
            if (this.disableMousewheel) {
                return;
            }

            e.preventDefault();
            e.stopPropagation();

            var delta = e.originalEvent.wheelDelta || -e.originalEvent.detail,
                scrollTo = null;

            if (e.type === 'mousewheel') {
                scrollTo = e.originalEvent.wheelDelta * -1;
            } else if (e.type === 'DOMMouseScroll') {
                scrollTo = 40 * e.originalEvent.detail;
            }

            if (scrollTo) {
                e.preventDefault();
                $(this).scrollTop(scrollTo + $(this).scrollTop());
            }

            switch (this.highlightedUnit) {
                case 'minute':
                    if (delta > 0) {
                        this.incrementMinute();
                    } else {
                        this.decrementMinute();
                    }
                    this.highlightMinute();
                    break;
                case 'second':
                    if (delta > 0) {
                        this.incrementSecond();
                    } else {
                        this.decrementSecond();
                    }
                    this.highlightSecond();
                    break;
                case 'meridian':
                    this.toggleMeridian();
                    this.highlightMeridian();
                    break;
                default:
                    if (delta > 0) {
                        this.incrementHour();
                    } else {
                        this.decrementHour();
                    }
                    this.highlightHour();
                    break;
            }

            return false;
        },

        // This method was adapted from bootstrap-datepicker.
        place: function () {
            if (this.isInline) {
                return;
            }
            var widgetWidth = this.$widget.outerWidth(),
                widgetHeight = this.$widget.outerHeight(),
                visualPadding = 10,
                windowWidth = $(window).width(),
                windowHeight = $(window).height(),
                scrollTop = $(window).scrollTop();

            var zIndex =
                parseInt(
                    this.$element
                        .parents()
                        .filter(function () {})
                        .first()
                        .css('z-index'),
                    10
                ) + 10;
            var offset = this.component ? this.component.parent().offset() : this.$element.offset();
            var height = this.component ? this.component.outerHeight(true) : this.$element.outerHeight(false);
            var width = this.component ? this.component.outerWidth(true) : this.$element.outerWidth(false);
            var left = offset.left,
                top = offset.top;

            this.$widget.removeClass(
                'timepicker-orient-top timepicker-orient-bottom timepicker-orient-right timepicker-orient-left'
            );

            if (this.orientation.x !== 'auto') {
                this.picker.addClass('datepicker-orient-' + this.orientation.x);
                if (this.orientation.x === 'right') {
                    left -= widgetWidth - width;
                }
            } else {
                // auto x orientation is best-placement: if it crosses a window edge, fudge it sideways
                // Default to left
                this.$widget.addClass('timepicker-orient-left');
                if (offset.left < 0) {
                    left -= offset.left - visualPadding;
                } else if (offset.left + widgetWidth > windowWidth) {
                    left = windowWidth - widgetWidth - visualPadding;
                }
            }
            // auto y orientation is best-situation: top or bottom, no fudging, decision based on which shows more of the widget
            var yorient = this.orientation.y,
                topOverflow,
                bottomOverflow;
            if (yorient === 'auto') {
                topOverflow = -scrollTop + offset.top - widgetHeight;
                bottomOverflow = scrollTop + windowHeight - (offset.top + height + widgetHeight);
                if (Math.max(topOverflow, bottomOverflow) === bottomOverflow) {
                    yorient = 'top';
                } else {
                    yorient = 'bottom';
                }
            }
            this.$widget.addClass('timepicker-orient-' + yorient);
            if (yorient === 'top') {
                top += height;
            } else {
                top -= widgetHeight + parseInt(this.$widget.css('padding-top'), 10);
            }

            this.$widget.css({
                top: top,
                left: left,
                zIndex: zIndex,
            });
        },

        remove: function () {
            $('document').off('.timepicker');
            if (this.$widget) {
                this.$widget.remove();
            }
            delete this.$element.data().timepicker;
        },

        setDefaultTime: function (defaultTime) {
            if (!this.$element.val()) {
                if (defaultTime === 'current') {
                    var dTime = new Date(),
                        hours = dTime.getHours(),
                        minutes = dTime.getMinutes(),
                        seconds = dTime.getSeconds(),
                        meridian = 'AM';

                    if (seconds !== 0) {
                        seconds = Math.ceil(dTime.getSeconds() / this.secondStep) * this.secondStep;
                        if (seconds === 60) {
                            minutes += 1;
                            seconds = 0;
                        }
                    }

                    if (minutes !== 0) {
                        minutes = Math.ceil(dTime.getMinutes() / this.minuteStep) * this.minuteStep;
                        if (minutes === 60) {
                            hours += 1;
                            minutes = 0;
                        }
                    }

                    if (this.showMeridian) {
                        if (hours === 0) {
                            hours = 12;
                        } else if (hours >= 12) {
                            if (hours > 12) {
                                hours = hours - 12;
                            }
                            meridian = 'PM';
                        } else {
                            meridian = 'AM';
                        }
                    }

                    this.hour = hours;
                    this.minute = minutes;
                    this.second = seconds;
                    this.meridian = meridian;

                    this.update();
                } else if (defaultTime === false) {
                    this.hour = 0;
                    this.minute = 0;
                    this.second = 0;
                    this.meridian = 'AM';
                } else {
                    this.setTime(defaultTime);
                }
            } else {
                this.updateFromElementVal();
            }
        },

        setTime: function (time, ignoreWidget) {
            if (!time) {
                this.clear();
                return;
            }

            var timeArray, hour, minute, second, meridian;

            if (typeof time === 'object' && time.getMonth) {
                // this is a date object
                hour = time.getHours();
                minute = time.getMinutes();
                second = time.getSeconds();

                if (this.showMeridian) {
                    meridian = 'AM';
                    if (hour > 12) {
                        meridian = 'PM';
                        hour = hour % 12;
                    }

                    if (hour === 12) {
                        meridian = 'PM';
                    }
                }
            } else {
                if (time.match(/p/i) !== null) {
                    meridian = 'PM';
                } else {
                    meridian = 'AM';
                }

                time = time.replace(/[^0-9\:]/g, '');

                timeArray = time.split(':');

                hour = timeArray[0] ? timeArray[0].toString() : timeArray.toString();
                minute = timeArray[1] ? timeArray[1].toString() : '';
                second = timeArray[2] ? timeArray[2].toString() : '';

                // idiot proofing
                if (hour.length > 4) {
                    second = hour.substr(4, 2);
                }
                if (hour.length > 2) {
                    minute = hour.substr(2, 2);
                    hour = hour.substr(0, 2);
                }
                if (minute.length > 2) {
                    second = minute.substr(2, 2);
                    minute = minute.substr(0, 2);
                }
                if (second.length > 2) {
                    second = second.substr(2, 2);
                }

                hour = parseInt(hour, 10);
                minute = parseInt(minute, 10);
                second = parseInt(second, 10);

                if (isNaN(hour)) {
                    hour = 0;
                }
                if (isNaN(minute)) {
                    minute = 0;
                }
                if (isNaN(second)) {
                    second = 0;
                }

                if (this.showMeridian) {
                    if (hour < 1) {
                        hour = 1;
                    } else if (hour > 12) {
                        hour = 12;
                    }
                } else {
                    if (hour >= 24) {
                        hour = 23;
                    } else if (hour < 0) {
                        hour = 0;
                    }
                    if (hour < 13 && meridian === 'PM') {
                        hour = hour + 12;
                    }
                }

                if (minute < 0) {
                    minute = 0;
                } else if (minute >= 60) {
                    minute = 59;
                }

                if (this.showSeconds) {
                    if (isNaN(second)) {
                        second = 0;
                    } else if (second < 0) {
                        second = 0;
                    } else if (second >= 60) {
                        second = 59;
                    }
                }
            }

            this.hour = hour;
            this.minute = minute;
            this.second = second;
            this.meridian = meridian;

            this.update(ignoreWidget);
        },

        showWidget: function () {
            if (this.isOpen) {
                return;
            }

            if (this.$element.is(':disabled')) {
                return;
            }

            // show/hide approach taken by datepicker
            this.$widget.appendTo(this.appendWidgetTo);
            var self = this;
            $(document).on('mousedown.timepicker, touchend.timepicker', function (e) {
                // This condition was inspired by bootstrap-datepicker.
                // The element the timepicker is invoked on is the input but it has a sibling for addon/button.
                if (
                    !(
                        self.$element.parent().find(e.target).length ||
                        self.$widget.is(e.target) ||
                        self.$widget.find(e.target).length
                    )
                ) {
                    self.hideWidget();
                }
            });

            this.$element.trigger({
                type: 'show.timepicker',
                time: {
                    value: this.getTime(),
                    hours: this.hour,
                    minutes: this.minute,
                    seconds: this.second,
                    meridian: this.meridian,
                },
            });

            this.place();
            if (this.disableFocus) {
                this.$element.blur();
            }

            // widget shouldn't be empty on open
            if (this.hour === '') {
                if (this.defaultTime) {
                    this.setDefaultTime(this.defaultTime);
                } else {
                    this.setTime('0:0:0');
                }
            }

            if (this.template === 'modal' && this.$widget.modal) {
                this.$widget.modal('show').on('hidden', $.proxy(this.hideWidget, this));
            } else {
                if (this.isOpen === false) {
                    this.$widget.addClass('open');
                }
            }

            this.isOpen = true;
        },

        toggleMeridian: function () {
            this.meridian = this.meridian === 'AM' ? 'PM' : 'AM';
        },

        update: function (ignoreWidget) {
            this.updateElement();
            if (!ignoreWidget) {
                this.updateWidget();
            }

            this.$element.trigger({
                type: 'changeTime.timepicker',
                time: {
                    value: this.getTime(),
                    hours: this.hour,
                    minutes: this.minute,
                    seconds: this.second,
                    meridian: this.meridian,
                },
            });
        },

        updateElement: function () {
            this.$element.val(this.getTime()).change();
        },

        updateFromElementVal: function () {
            this.setTime(this.$element.val());
        },

        updateWidget: function () {
            if (this.$widget === false) {
                return;
            }

            var hour = this.hour,
                minute = this.minute.toString().length === 1 ? '0' + this.minute : this.minute,
                second = this.second.toString().length === 1 ? '0' + this.second : this.second;

            if (this.showInputs) {
                this.$widget.find('input.bootstrap-timepicker-hour').val(hour);
                this.$widget.find('input.bootstrap-timepicker-minute').val(minute);

                if (this.showSeconds) {
                    this.$widget.find('input.bootstrap-timepicker-second').val(second);
                }
                if (this.showMeridian) {
                    this.$widget.find('input.bootstrap-timepicker-meridian').val(this.meridian);
                }
            } else {
                this.$widget.find('span.bootstrap-timepicker-hour').text(hour);
                this.$widget.find('span.bootstrap-timepicker-minute').text(minute);

                if (this.showSeconds) {
                    this.$widget.find('span.bootstrap-timepicker-second').text(second);
                }
                if (this.showMeridian) {
                    this.$widget.find('span.bootstrap-timepicker-meridian').text(this.meridian);
                }
            }
        },

        updateFromWidgetInputs: function () {
            if (this.$widget === false) {
                return;
            }

            var t =
                this.$widget.find('input.bootstrap-timepicker-hour').val() +
                ':' +
                this.$widget.find('input.bootstrap-timepicker-minute').val() +
                (this.showSeconds ? ':' + this.$widget.find('input.bootstrap-timepicker-second').val() : '') +
                (this.showMeridian ? this.$widget.find('input.bootstrap-timepicker-meridian').val() : '');
            this.setTime(t, true);
        },

        widgetClick: function (e) {
            e.stopPropagation();
            e.preventDefault();

            var $input = $(e.target),
                action = $input.closest('a').data('action');

            if (action) {
                this[action]();
            }
            this.update();

            if ($input.is('input')) {
                $input.get(0).setSelectionRange(0, 2);
            }
        },

        widgetKeydown: function (e) {
            var $input = $(e.target),
                name = $input.attr('class').replace('bootstrap-timepicker-', '');

            switch (e.keyCode) {
                case 9: //tab
                    if (
                        (this.showMeridian && name === 'meridian') ||
                        (this.showSeconds && name === 'second') ||
                        (!this.showMeridian && !this.showSeconds && name === 'minute')
                    ) {
                        return this.hideWidget();
                    }
                    break;
                case 27: // escape
                    this.hideWidget();
                    break;
                case 38: // up arrow
                    e.preventDefault();
                    switch (name) {
                        case 'hour':
                            this.incrementHour();
                            break;
                        case 'minute':
                            this.incrementMinute();
                            break;
                        case 'second':
                            this.incrementSecond();
                            break;
                        case 'meridian':
                            this.toggleMeridian();
                            break;
                    }
                    this.setTime(this.getTime());
                    $input.get(0).setSelectionRange(0, 2);
                    break;
                case 40: // down arrow
                    e.preventDefault();
                    switch (name) {
                        case 'hour':
                            this.decrementHour();
                            break;
                        case 'minute':
                            this.decrementMinute();
                            break;
                        case 'second':
                            this.decrementSecond();
                            break;
                        case 'meridian':
                            this.toggleMeridian();
                            break;
                    }
                    this.setTime(this.getTime());
                    $input.get(0).setSelectionRange(0, 2);
                    break;
            }
        },

        widgetKeyup: function (e) {
            if (
                e.keyCode === 65 ||
                e.keyCode === 77 ||
                e.keyCode === 80 ||
                e.keyCode === 46 ||
                e.keyCode === 8 ||
                (e.keyCode >= 46 && e.keyCode <= 57) ||
                (e.keyCode >= 96 && e.keyCode <= 105)
            ) {
                this.updateFromWidgetInputs();
            }
        },
    };

    //TIMEPICKER PLUGIN DEFINITION
    $.fn.timepicker = function (option) {
        var args = Array.apply(null, arguments);
        args.shift();
        return this.each(function () {
            var $this = $(this),
                data = $this.data('timepicker'),
                options = typeof option === 'object' && option;

            if (!data) {
                $this.data(
                    'timepicker',
                    (data = new Timepicker(this, $.extend({}, $.fn.timepicker.defaults, options, $(this).data())))
                );
            }

            if (typeof option === 'string') {
                data[option].apply(data, args);
            }
        });
    };

    $.fn.timepicker.defaults = {
        defaultTime: 'current',
        disableFocus: false,
        disableMousewheel: false,
        isOpen: false,
        minuteStep: 15,
        modalBackdrop: false,
        orientation: {x: 'auto', y: 'auto'},
        secondStep: 15,
        showSeconds: false,
        showInputs: true,
        showMeridian: true,
        template: 'dropdown',
        appendWidgetTo: 'body',
        showWidgetOnAddonClick: true,
    };

    $.fn.timepicker.Constructor = Timepicker;
})(jQuery, window, document);

/*!
 * jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD
		define(['jquery'], factory);
	} else if (typeof exports === 'object') {
		// CommonJS
		factory(require('jquery'));
	} else {
		// Browser globals
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write

		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};

}));

/// <reference path="Slider.d.ts" />
var CoveoSliderMethods = {
    Destroy: 'destroy',
    Disable: 'disable',
    Enable: 'enable',
    Update: 'update',
};
var Slider = /** @class */ (function () {
    function Slider(options) {
        var _this = this;
        if (options.slider && _.isUndefined(options.min) && options.slider.attr('min')) {
            options.min = parseFloat(options.slider.attr('min'));
        }
        if (options.slider && _.isUndefined(options.max) && options.slider.attr('max')) {
            options.max = parseFloat(options.slider.attr('max'));
        }
        this.options = _.defaults(options, this.defaults(options.colors));
        this.$el = options.slider;
        this._uid = ++Slider._uid;
        this.$el.attr({
            'data-uid': this._uid,
            max: this.options.max,
            min: this.options.min,
            step: this.options.step,
        });
        this.$el.on('input', function () { return _this.onInput(); });
        this.$el.on('change', function () { return _this.onChange(); });
        if (this.$el.prop('disabled')) {
            this.disable();
        }
        this.options.onInit(this);
    }
    Slider.prototype.onInput = function () {
        this.update();
        this.options.onSlide(this);
    };
    Slider.prototype.onChange = function () {
        this.update();
        this.options.onChange(this);
    };
    Slider.prototype.defaults = function (colors) {
        return {
            colors: _.defaults(colors || {}, { lower: Slider.LowerDefaultColor, upper: Slider.UpperDefaultColor }),
            min: 0,
            max: 100,
            step: 1,
            labels: [],
            ticks: [],
            value: Slider.DefaultValue,
            thumbWidth: 20,
            onInit: _.noop,
            onSlide: _.noop,
            onChange: _.noop,
            onDestroy: _.noop,
        };
    };
    Slider.prototype.update = function () {
        var value = ((this.value - this.min) / (this.max - this.min)) * 100;
        this.updateSliderColors(value);
        this.positionElements();
    };
    Slider.prototype.positionElements = function () {
        var _this = this;
        if (this.options.labels && this.options.labels.length) {
            var $container_1 = this.$el.nextAll('.' + Slider.LabelContainerClass);
            if ($container_1 && $container_1.length) {
                var numberOfTicks_1 = (this.max - this.min) / this.options.step;
                _.each(this.options.labels, function (label) {
                    var $el = $container_1.find("." + Slider.LabelClass + "[data-index=\"" + label.index + "\"]");
                    if ($el && $el.length) {
                        var offsetForMiddle = $el.width() / $container_1.width() * 100 / 2;
                        var offset = (label.index - _this.options.min) / _this.options.step / numberOfTicks_1;
                        $el.css({
                            'left': (offset * 100 - offsetForMiddle) + '%',
                            'margin-left': (offset * -1 * _this.options.thumbWidth + (_this.options.thumbWidth / 2)) + 'px',
                        });
                    }
                });
            }
        }
        if (this.options.ticks && this.options.ticks.length) {
            var $container_2 = this.$el.nextAll('.' + Slider.TickContainerClass);
            if ($container_2 && $container_2.length) {
                var numberOfTicks_2 = (this.max - this.min) / this.options.step;
                _.each(this.options.ticks, function (tick) {
                    var $el = $container_2.find("." + Slider.TickClass + "[data-index=\"" + tick + "\"]");
                    if ($el && $el.length) {
                        var index = (tick - _this.min) / _this.options.step;
                        var offset = index / numberOfTicks_2;
                        $el.css({
                            left: (offset * 100) + '%',
                            'margin-left': offset * -1 * _this.options.thumbWidth + 'px',
                            background: tick < _this.value ? _this.options.colors.lower : _this.options.colors.upper,
                        });
                    }
                });
            }
        }
    };
    Slider.prototype.updateSliderColors = function (value) {
        var styleElement = this.$el.prev('.' + Slider.StyleClass);
        var colors = this.options.colors;
        var gradient = "background: linear-gradient(to right, " + colors.lower + " " + value + "%, " + colors.upper + " " + value + "%);";
        var selector = "." + Slider.InputClass + "[data-uid='" + this._uid + "']";
        var webkit = ["input[type=\"range\"]" + selector + "::-webkit-slider-runnable-track {", gradient, '}'].join('');
        var firefox = ["input[type=\"range\"]" + selector + "::-moz-range-track {", gradient, '}'].join('');
        var ie = [
            "input[type=\"range\"]" + selector + "::-ms-fill-lower {",
            'background: ',
            this.options.colors.lower,
            '}',
            "input[type=\"range\"]" + selector + "::-ms-fill-upper {",
            'background: ',
            this.options.colors.upper,
            '}',
        ].join('');
        styleElement.html([webkit, firefox, ie].join(''));
    };
    Object.defineProperty(Slider.prototype, "value", {
        get: function () { return parseFloat(this.$el.val()); },
        set: function (value) {
            var minOfValueAndMax = Math.min(value, this.max);
            var maxOfValueAndMin = Math.max(minOfValueAndMax, this.min);
            this.$el.val(maxOfValueAndMin);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "min", {
        get: function () { return parseFloat(this.$el.attr('min')); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Slider.prototype, "max", {
        get: function () { return parseFloat(this.$el.attr('max')); },
        enumerable: true,
        configurable: true
    });
    Slider.prototype.disable = function () {
        this.$el.prop('disabled', true);
        this.$el.css('opacity', '0.8');
    };
    Slider.prototype.enable = function () {
        this.$el.prop('disabled', false);
        this.$el.css('opacity', '1');
    };
    Slider.prototype.destroy = function (elem) {
        this.$el.prev('.' + Slider.StyleClass).remove();
        this.$el.nextAll('.' + Slider.TickContainerClass).remove();
        this.$el.nextAll('.' + Slider.LabelContainerClass).remove();
        this.$el.removeData('slider');
        this.$el.removeAttr('data-uid');
        this.$el.off('input change');
        elem.removeData('slider');
        this.options.onDestroy();
    };
    Slider.LowerDefaultColor = '#f57f03';
    Slider.UpperDefaultColor = '#dddddd';
    Slider.StyleClass = 'coveo-slider-style';
    Slider.InputClass = 'coveo-slider-input';
    Slider.LabelContainerClass = 'coveo-slider-labels';
    Slider.LabelClass = 'coveo-slider-label';
    Slider.TickContainerClass = 'coveo-slider-ticks';
    Slider.TickClass = 'coveo-slider-tick';
    Slider.DefaultValue = 50;
    Slider._uid = 0;
    return Slider;
}());
+function ($) {
    'use strict';
    var createStyleElement = function () { return $('<style />', { type: 'text/css', class: Slider.StyleClass }); };
    var createInputElement = function (value, disabled) { return $('<input />', { type: 'range', class: Slider.InputClass, value: value }).prop('disabled', disabled); };
    var createTickContainer = function () { return $('<div />', { class: Slider.TickContainerClass }); };
    var createLabelContainer = function () { return $('<div />', { class: Slider.LabelContainerClass }); };
    var createLabelElements = function (container, labels) {
        _.chain(labels)
            .sortBy(function (label) { return label.index; })
            .each(function (label) {
            var $el = $('<div />', {
                class: Slider.LabelClass,
                text: label.label || label.index,
                'data-index': label.index,
            });
            container.append($el);
        });
    };
    var createTickElements = function (container, ticks) {
        _.chain(ticks)
            .sortBy(_.identity)
            .each(function (tick) {
            var $el = $('<div />', { class: Slider.TickClass, 'data-index': tick });
            container.append($el);
        });
    };
    $.fn.slider = function (opts) {
        var $this = $(this);
        opts = opts || { slider: $this };
        var slider = $this.data('slider');
        if (_.isNumber(opts)) {
            opts = { value: opts };
        }
        if (slider && slider instanceof Slider) {
            var slider_1 = $this.data('slider');
            if (opts && !_.isUndefined(opts.value)) {
                slider_1.value = opts.value;
                validateAndCreateElements($this, { value: slider_1.value });
                slider_1.update();
            }
            else if (_.isString(opts)) {
                validateAndCreateElements($this, {});
                switch (opts) {
                    case CoveoSliderMethods.Destroy:
                        slider_1.destroy($this);
                        break;
                    case CoveoSliderMethods.Disable:
                        slider_1.disable();
                        break;
                    case CoveoSliderMethods.Enable:
                        slider_1.enable();
                        break;
                    case CoveoSliderMethods.Update:
                        slider_1.update();
                        break;
                    default:
                        break;
                }
            }
            else {
                // no param. update
                validateAndCreateElements($this, { value: slider_1.value });
                slider_1.update();
            }
        }
        else if (!_.isString(opts) && !_.isNumber(opts)) {
            var sliderOptions = opts;
            var elements = validateAndCreateElements($this, sliderOptions);
            sliderOptions.slider = elements.input;
            slider = new Slider(sliderOptions);
            $this.data('slider', slider);
        }
        if (slider && slider instanceof Slider) {
            slider.update();
        }
        return $this;
    };
    function validateAndCreateElements($el, opts) {
        var style;
        var input;
        if ($el.is('input[type="range"]')) {
            input = $el;
            input.prop('disabled', opts.disabled === true);
            style = $el.prev('style.' + Slider.StyleClass);
            if (style.length == 0) {
                style = createStyleElement();
                $el.before(style);
            }
            if (opts && opts.ticks) {
                var ticksContainer = $el.nextAll('.' + Slider.TickContainerClass);
                var ticks = _.isBoolean(opts.ticks) && opts.ticks ? _.range(opts.min || 0, (opts.max || 100) + (opts.step || 1), opts.step || 1)
                    : opts.ticks;
                opts.ticks = ticks;
                if (ticks && ticks.length) {
                    if (ticksContainer.length == 0) {
                        ticksContainer = createTickContainer();
                    }
                    createTickElements(ticksContainer, ticks);
                    $el.after(ticksContainer);
                }
            }
            if (opts && opts.labels) {
                var labelsContainer = $el.nextAll('.' + Slider.LabelContainerClass);
                var labels = _.isBoolean(opts.labels) && opts.labels ? _.range(opts.min || 0, (opts.max || 100) + (opts.step || 1), opts.step || 1) : opts.labels;
                if (labels && labels.length) {
                    labels = _.map(labels, function (label) { return _.isNumber(label) ? { index: label } : label; });
                    if (labelsContainer.length == 0) {
                        labelsContainer = createLabelContainer();
                    }
                    createLabelElements(labelsContainer, labels);
                    $el.after(labelsContainer);
                }
                opts.labels = labels;
            }
        }
        else {
            // assume container
            style = $el.children('style.' + Slider.StyleClass);
            if (style.length == 0) {
                style = createStyleElement();
                $el.prepend(style);
            }
            input = $el.children('input[type="range"].' + Slider.InputClass);
            if (input.length == 0) {
                input = createInputElement(_.isUndefined(opts.value) ? Slider.DefaultValue : opts.value, opts && opts.disabled === true);
                $el.append(input);
            }
            else if (_.isNumber(opts.value)) {
                input.val(opts.value);
            }
            if (opts && opts.ticks) {
                var ticksContainer = $el.children('.' + Slider.TickContainerClass);
                var ticks = _.isBoolean(opts.ticks) && opts.ticks ? _.range(opts.min || 0, (opts.max || 100) + (opts.step || 1), opts.step || 1)
                    : opts.ticks;
                opts.ticks = ticks;
                if (ticks && ticks.length) {
                    if (ticksContainer.length == 0) {
                        ticksContainer = createTickContainer();
                    }
                    createTickElements(ticksContainer, ticks);
                    $el.append(ticksContainer);
                }
            }
            if (opts && opts.labels) {
                var labelsContainer = $el.children('.' + Slider.LabelContainerClass);
                var labels = _.isBoolean(opts.labels) && opts.labels ? _.range(opts.min || 0, (opts.max || 100) + (opts.step || 1), opts.step || 1) : opts.labels;
                if (labels && labels.length) {
                    labels = _.map(labels, function (label) { return _.isNumber(label) ? { index: label } : label; });
                    if (labelsContainer.length == 0) {
                        labelsContainer = createLabelContainer();
                    }
                    createLabelElements(labelsContainer, labels);
                    $el.append(labelsContainer);
                }
                opts.labels = labels;
            }
        }
        return {
            input: input,
            style: style,
        };
    }
}(jQuery);

//# sourceMappingURL=dist/js/Coveo.Slider.js.map
